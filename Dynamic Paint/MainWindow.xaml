<Window x:Class="Dynamic_Paint.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Dynamic_Paint.ViewModels"
        xmlns:models="clr-namespace:Dynamic_Paint.Models"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:light="http://www.galasoft.ch/mvvmlight"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        mc:Ignorable="d"
        WindowState="Maximized"
        MinWidth="640" MinHeight="480"
        Title="{Binding Path=WindowTitle}">
    <Window.CommandBindings>
        <CommandBinding Command="New" Executed="NewCommandBinding_Executed"></CommandBinding>
        <CommandBinding Command="Open" Executed="OpenCommandBinding_Executed"></CommandBinding>
        <CommandBinding Command="Save" Executed="SaveCommandBinding_Executed"></CommandBinding>
        <CommandBinding Command="SaveAs" Executed="SaveAsCommandBinding_Executed"></CommandBinding>
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Key="N" Modifiers="Ctrl" Command="New"></KeyBinding>
        <KeyBinding Key="O" Modifiers="Ctrl" Command="Open"></KeyBinding>
        <KeyBinding Key="S" Modifiers="Ctrl" Command="Save"></KeyBinding>
    </Window.InputBindings>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="9*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal">
            <StackPanel.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
            </StackPanel.Background>
            <Menu>
                <MenuItem Header="{Binding Path=FileMenuText, Source={StaticResource Resources}}">
                    <MenuItem Header="{Binding Path=FileMenuNewText, Source={StaticResource Resources}}"
                              Command="New" InputGestureText="Ctrl+N" />
                    <MenuItem Header="{Binding Path=FileMenuOpenText, Source={StaticResource Resources}}" 
                              Command="Open" InputGestureText="Ctrl+O" />
                    <MenuItem Header="{Binding Path=FileMenuSaveText, Source={StaticResource Resources}}" 
                              Command="Save" InputGestureText="Ctrl+S" />
                    <MenuItem Header="{Binding Path=FileMenuSaveAsText, Source={StaticResource Resources}}" 
                              Command="SaveAs" />
                    <Separator />
                    <MenuItem Header="{Binding Path=FileMenuExitText, Source={StaticResource Resources}}"
                              Command="{Binding Path=ExitAppCommand}" />
                </MenuItem>
                <MenuItem Header="{Binding Path=LanguageMenuText, Source={StaticResource Resources}}">
                    <MenuItem Header="{Binding Path=LanguageMenuEnglishText, Source={StaticResource Resources}}" 
                              Command="{Binding Path=ChangeLanguageCommand}" CommandParameter="en" IsChecked="{Binding Path=English}"/>
                    <MenuItem Header="{Binding Path=LanguageMenuPolishText, Source={StaticResource Resources}}"
                              Command="{Binding Path=ChangeLanguageCommand}" CommandParameter="pl" IsChecked="{Binding Path=Polish}"/>
                </MenuItem>
            </Menu>
        </StackPanel>

        <WrapPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal">
            <WrapPanel.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
            </WrapPanel.Background>
            <xctk:ColorPicker AvailableColorsSortingMode="HueSaturationBrightness" ShowAdvancedButton="False" 
                              ShowStandardColors="False" DisplayColorAndName="True" SelectedColor="{Binding SelectedColor}"
                              Width="Auto" AvailableColorsHeader="{Binding Path=ColorsHeader, Source={StaticResource Resources}}"
                              ToolTip="{Binding Path=ColorPickerTooltip, Source={StaticResource Resources}}"/>
            <ComboBox Width="60" Height="30" 
                      ItemsSource="{Binding StrokeThicknessOptions}" SelectedItem="{Binding SelectedStrokeThickness}"
                      ToolTip="{Binding Path=StrokeThicknessPickerTooltip, Source={StaticResource Resources}}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Margin="0 2 6 0" Text="{Binding}"></TextBlock>
                            <Line X1="0" X2="30" Width="29" StrokeThickness="{Binding}" Stroke="Black" Margin="0 10 0 10"/>
                        </StackPanel>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <StackPanel Orientation="Horizontal">
                <ToggleButton Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                              MaxHeight="25" MaxWidth="25" Command="{Binding DrawLineCommand}" IsChecked="{Binding Path=DrawingLine}"
                              ToolTip="{Binding Path=LineTooltip, Source={StaticResource Resources}}">
                    <Image Source="Icons/line.ico" />
                </ToggleButton>
                <ToggleButton Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                              MaxHeight="25" MaxWidth="25" Command="{Binding DrawRectangleCommand}" IsChecked="{Binding Path=DrawingRectangle}"
                              ToolTip="{Binding Path=RectangleTooltip, Source={StaticResource Resources}}">
                    <Image Source="Icons/rectangle.png" />
                </ToggleButton>
                <ToggleButton Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                              MaxHeight="25" MaxWidth="25" Command="{Binding DrawEllipseCommand}" IsChecked="{Binding Path=DrawingEllipse}"
                              ToolTip="{Binding Path=EllipseTooltip, Source={StaticResource Resources}}">
                    <Image Source="Icons/ellipse.png" />
                </ToggleButton>
                <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" 
                        MaxHeight="25" MaxWidth="25" Command="{Binding UndoCommand}"
                        ToolTip="{Binding Path=UndoTooltip, Source={StaticResource Resources}}">
                    <Image Source="Icons/undo.ico" />
                </Button>
            </StackPanel>
        </WrapPanel>
        
        <ScrollViewer Grid.Row="2" Grid.Column="0" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
            <Grid Background="{DynamicResource {x:Static SystemColors.AppWorkspaceBrushKey}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <ItemsControl ItemsSource="{Binding Path=SceneObjects}" Name="SceneControl">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas Grid.Column="0" Grid.Row="0" Background="{Binding Path=CanvasBackground}" Name="Scene" 
                                    Width="{Binding Path=CanvasWidth}" Height="{Binding Path=CanvasHeight}" IsItemsHost="True">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding MouseDownCommand}" CommandParameter="{Binding ElementName=Scene}" />
                                        <!-- <light:EventToCommand Command="{Binding MouseDownCommand}" CommandParameter="{Binding ElementName=Scene}" />-->
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseLeftButtonUp">
                                        <i:InvokeCommandAction Command="{Binding MouseUpCommand}" CommandParameter="{Binding ElementName=Scene}" />
                                        <!--<light:EventToCommand Command="{Binding MouseUpCommand}" PassEventArgsToCommand="True" />-->
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseMove">
                                        <i:InvokeCommandAction Command="{Binding MouseMoveCommand}" CommandParameter="{Binding ElementName=Scene}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Canvas>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Path Data="{Binding ShapeData}" Stroke="{Binding StrokeColor}" StrokeThickness="{Binding StrokeThickness}"/>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  <!--  <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding Path=Left}" />
                            <Setter Property="Canvas.Top" Value="{Binding Path=Top}" />
                        </Style>
                    </ItemsControl.ItemContainerStyle> -->
                </ItemsControl>
            </Grid>
        </ScrollViewer>
        
        <StatusBar Grid.Row="3" Grid.Column="0">
            <StatusBarItem DockPanel.Dock="Left">
                <Label Content="{Binding Path=StatusBarText}" />
            </StatusBarItem>
            <StatusBarItem DockPanel.Dock="Right">
                <Label Content="{Binding Path=Coordinates}" />
            </StatusBarItem>
            <StatusBarItem>
                <!-- Fill with nothing -->
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
